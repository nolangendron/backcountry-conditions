{"ast":null,"code":"import _slicedToArray from \"/Users/nolan/Documents/2019 - Projects/snow-data/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nolan/Documents/2019 - Projects/snow-data/src/components/DropDown.js\";\nimport React, { useState, useEffect } from 'react';\nexport const DropDown = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        weatherStationsList = _useState2[0],\n        setWeatherStationsList = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        weatherStation = _useState4[0],\n        setWeatherStation = _useState4[1];\n\n  const _useState5 = useState({\n    name: ''\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        selectedStation = _useState6[0],\n        setSelectedStation = _useState6[1];\n\n  useEffect(() => {\n    const getWeather = async () => {\n      const url = `https://www.drivebc.ca/api/weather/observations?format=json`;\n      const response = await fetch(url);\n      const data = await response.json();\n      setWeatherStationsList(data);\n    };\n\n    getWeather();\n  }, []);\n  useEffect(() => {\n    function getStation(station) {\n      return station.station.name === weatherStation;\n    }\n\n    const selectedWeatherStation = weatherStationsList.find(getStation);\n    const one = selectedWeatherStation && selectedWeatherStation.station;\n    setSelectedStation({\n      name: selectedWeatherStation\n    });\n  }, [weatherStation, weatherStationsList]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"station\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Weather Station\", React.createElement(\"select\", {\n    id: \"station\",\n    value: weatherStation,\n    onChange: e => setWeatherStation(e.target.value),\n    onBlur: e => setWeatherStation(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Select Station...\"), weatherStationsList.map(station => React.createElement(\"option\", {\n    key: station.station.id,\n    value: station.station.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, station.station.name)))), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, weatherStation));\n};","map":{"version":3,"sources":["/Users/nolan/Documents/2019 - Projects/snow-data/src/components/DropDown.js"],"names":["React","useState","useEffect","DropDown","weatherStationsList","setWeatherStationsList","weatherStation","setWeatherStation","name","selectedStation","setSelectedStation","getWeather","url","response","fetch","data","json","getStation","station","selectedWeatherStation","find","one","e","target","value","map","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA,oBAC0BF,QAAQ,CAAC,EAAD,CADlC;AAAA;AAAA,QACrBG,mBADqB;AAAA,QACAC,sBADA;;AAAA,qBAEgBJ,QAAQ,EAFxB;AAAA;AAAA,QAErBK,cAFqB;AAAA,QAELC,iBAFK;;AAAA,qBAGkBN,QAAQ,CAAC;AACrDO,IAAAA,IAAI,EAAE;AAD+C,GAAD,CAH1B;AAAA;AAAA,QAGrBC,eAHqB;AAAA,QAGJC,kBAHI;;AAO5BR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,UAAU,GAAG,YAAY;AAC7B,YAAMC,GAAG,GAAI,6DAAb;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,YAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAX,MAAAA,sBAAsB,CAACU,IAAD,CAAtB;AACD,KALD;;AAMAJ,IAAAA,UAAU;AACX,GARQ,EAQN,EARM,CAAT;AAUAT,EAAAA,SAAS,CAAC,MAAM;AACd,aAASe,UAAT,CAAoBC,OAApB,EAA6B;AAC3B,aAAOA,OAAO,CAACA,OAAR,CAAgBV,IAAhB,KAAyBF,cAAhC;AACD;;AACD,UAAMa,sBAAsB,GAAGf,mBAAmB,CAACgB,IAApB,CAAyBH,UAAzB,CAA/B;AACJ,UAAMI,GAAG,GAAGF,sBAAsB,IAAIA,sBAAsB,CAACD,OAA7D;AACIR,IAAAA,kBAAkB,CAAC;AAAEF,MAAAA,IAAI,EAAEW;AAAR,KAAD,CAAlB;AACD,GAPQ,EAON,CAACb,cAAD,EAAiBF,mBAAjB,CAPM,CAAT;AAQA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEA;AACI,IAAA,EAAE,EAAC,SADP;AAEI,IAAA,KAAK,EAAEE,cAFX;AAGI,IAAA,QAAQ,EAAEgB,CAAC,IAAIf,iBAAiB,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV,CAHpC;AAII,IAAA,MAAM,EAAEF,CAAC,IAAIf,iBAAiB,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV,CAJlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBALJ,EAMKpB,mBAAmB,CAACqB,GAApB,CAAwBP,OAAO,IAC9B;AAAQ,IAAA,GAAG,EAAEA,OAAO,CAACA,OAAR,CAAgBQ,EAA7B;AAAiC,IAAA,KAAK,EAAER,OAAO,CAACA,OAAR,CAAgBV,IAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGU,OAAO,CAACA,OAAR,CAAgBV,IAFnB,CADD,CANL,CAFA,CADF,EAiBE;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBF,CADF,EAoBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKF,cAAL,CApBF,CADF;AAwBD,CAjDM","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport const DropDown = () => {\n  const [weatherStationsList, setWeatherStationsList] = useState([]);\n  const [weatherStation, setWeatherStation] = useState();\n  const [selectedStation, setSelectedStation] = useState({\n    name: ''\n  });\n\n  useEffect(() => {\n    const getWeather = async () => {\n      const url = `https://www.drivebc.ca/api/weather/observations?format=json`;\n      const response = await fetch(url);\n      const data = await response.json();\n      setWeatherStationsList(data)\n    }\n    getWeather();\n  }, [])\n\n  useEffect(() => {\n    function getStation(station) {\n      return station.station.name === weatherStation;\n    }\n    const selectedWeatherStation = weatherStationsList.find(getStation);\nconst one = selectedWeatherStation && selectedWeatherStation.station\n    setSelectedStation({ name: selectedWeatherStation })\n  }, [weatherStation, weatherStationsList]);\n  return (\n    <div>\n      <form>\n        <label htmlFor=\"station\">\n          Weather Station\n        <select\n            id=\"station\"\n            value={weatherStation}\n            onChange={e => setWeatherStation(e.target.value)}\n            onBlur={e => setWeatherStation(e.target.value)}>\n            <option>Select Station...</option>\n            {weatherStationsList.map(station => (\n              <option key={station.station.id} value={station.station.name}\n              >\n                {station.station.name}\n              </option>\n            ))}\n          </select>\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      <h2>{weatherStation}</h2>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}