{"ast":null,"code":"import _slicedToArray from \"/Users/nolan/Documents/2019 - Projects/snow-data/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nolan/Documents/2019 - Projects/snow-data/src/components/WindChart.js\";\nimport React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport { Doughnut } from 'react-chartjs-2';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLocationArrow } from '@fortawesome/free-solid-svg-icons';\nconst Wind = styled(\"div\")` \ndisplay: flex;\nposition: relative;\nheight: 100%;\nflex-direction: row;\nflex-wrap: wrap;\njustify-content: center;\nalign-content: center;\nbackground: #fff;\nbox-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);\n\n.locationArrow {\n  position: absolute;\n  align-self: center;\n  margin-top: 20px;\n  transform: rotate(-45deg);\n}\n\nbutton {\n  background: grey;\n  color: white;\n  margin-top: 10px;\n  padding: 10px;\n}\n .windSpeed {\n   position: relative;\n }\n .title {\n  width: 100%;\n  text-align: center;\n  margin: 15px;\n}\n\nh3 {\n  margin: 0 0 5px 0;\n  font-size: 1em;\n  color: #1a366c;\n  text-transform: uppercase;\n}\n\n.north {\n  position: absolute;\n\tleft: 48%; top: 35%;\n}\n/* South */\n.south {\n  position: absolute;\n\tleft: 48%; bottom: 26%;\n}\n\n/* East */\n.east {\n  position: absolute;\n\tright: 31%; top: 52%;\n}\n/* West */\n.west {\n  position: absolute;\n\tleft: 31%; top: 52%;\n}\n`;\nconst data = {\n  datasets: [{\n    labels: [\"Red\", \"Blue\"],\n    data: [0, 360],\n    backgroundColor: [\"rgb(255, 99, 132)\", \"rgb(54, 162, 235)\", \"rgb(255, 205, 86)\"]\n  }]\n};\nconst options = {\n  circumference: Math.PI * 2,\n  rotation: Math.PI,\n  cutoutPercentage: 80,\n  plugins: {\n    datalabels: {\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      borderColor: '#ffffff',\n      align: 'start',\n      anchor: 'start',\n      offset: 10,\n      borderRadius: 4,\n      borderWidth: 1,\n      formatter: function (value, context) {\n        var i = context.dataIndex;\n        var len = context.dataset.data.length - 1;\n\n        if (i === len) {\n          return null;\n        }\n\n        return value + ' mph';\n      }\n    }\n  },\n  legend: {\n    display: false\n  },\n  tooltips: {\n    enabled: false\n  }\n};\nexport const WindChart = ({\n  lowElevationName,\n  highElevationName,\n  windUpper,\n  windLower\n}) => {\n  const lowerStationName = lowElevationName && lowElevationName;\n  const lowerWindDirection = windLower && windLower.lowerStationWindDirection;\n  const lowerWindSpeed = windLower && windLower.lowerStationWindSpeed;\n  const upperStationName = highElevationName && highElevationName;\n  const upperWindDirection = windUpper && windUpper.upperStationWindDirection;\n  const upperWindSpeed = windUpper && windUpper.upperStationWindSpeed;\n  const windDirection = windUpper ? upperWindDirection : lowerWindDirection;\n  const windSpeed = windUpper ? upperWindSpeed : lowerWindSpeed;\n  const stationName = highElevationName ? upperStationName : lowerStationName;\n\n  const _useState = useState({\n    degree: 0\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        rotation = _useState2[0],\n        setRotation = _useState2[1];\n\n  const windDirectionLastTwoDays = (arr1, arr2) => {\n    for (let i = 0; i < arr1.length; i++) {\n      setTimeout(function timer() {\n        setRotation({\n          degree: arr1[i]\n        });\n        data.datasets[0].data = [arr2[i] * 5, 360];\n      }, i * 100);\n    }\n  };\n\n  return React.createElement(Wind, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, stationName ? stationName : 'Station'), React.createElement(\"div\", {\n    className: \"windSpeed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, data.datasets[0].data[0] / 5, \" km/h\")), React.createElement(Doughnut, {\n    data: data,\n    options: options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }), React.createElement(FontAwesomeIcon, {\n    className: \"locationArrow\",\n    transform: {\n      rotate: rotation.degree\n    },\n    size: \"2x\",\n    color: \"red\",\n    icon: faLocationArrow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"north\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"N\"), React.createElement(\"span\", {\n    className: \"east\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"E\"), React.createElement(\"span\", {\n    className: \"south\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"S\"), React.createElement(\"span\", {\n    className: \"west\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"W\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => windDirectionLastTwoDays(windDirection, windSpeed),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"48hr Playback\")));\n};","map":{"version":3,"sources":["/Users/nolan/Documents/2019 - Projects/snow-data/src/components/WindChart.js"],"names":["React","useState","useEffect","styled","Doughnut","FontAwesomeIcon","faLocationArrow","Wind","data","datasets","labels","backgroundColor","options","circumference","Math","PI","rotation","cutoutPercentage","plugins","datalabels","borderColor","align","anchor","offset","borderRadius","borderWidth","formatter","value","context","i","dataIndex","len","dataset","length","legend","display","tooltips","enabled","WindChart","lowElevationName","highElevationName","windUpper","windLower","lowerStationName","lowerWindDirection","lowerStationWindDirection","lowerWindSpeed","lowerStationWindSpeed","upperStationName","upperWindDirection","upperStationWindDirection","upperWindSpeed","upperStationWindSpeed","windDirection","windSpeed","stationName","degree","setRotation","windDirectionLastTwoDays","arr1","arr2","setTimeout","timer","rotate"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport { Doughnut } from 'react-chartjs-2';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLocationArrow } from '@fortawesome/free-solid-svg-icons';\n\nconst Wind = styled(\"div\")` \ndisplay: flex;\nposition: relative;\nheight: 100%;\nflex-direction: row;\nflex-wrap: wrap;\njustify-content: center;\nalign-content: center;\nbackground: #fff;\nbox-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);\n\n.locationArrow {\n  position: absolute;\n  align-self: center;\n  margin-top: 20px;\n  transform: rotate(-45deg);\n}\n\nbutton {\n  background: grey;\n  color: white;\n  margin-top: 10px;\n  padding: 10px;\n}\n .windSpeed {\n   position: relative;\n }\n .title {\n  width: 100%;\n  text-align: center;\n  margin: 15px;\n}\n\nh3 {\n  margin: 0 0 5px 0;\n  font-size: 1em;\n  color: #1a366c;\n  text-transform: uppercase;\n}\n\n.north {\n  position: absolute;\n\tleft: 48%; top: 35%;\n}\n/* South */\n.south {\n  position: absolute;\n\tleft: 48%; bottom: 26%;\n}\n\n/* East */\n.east {\n  position: absolute;\n\tright: 31%; top: 52%;\n}\n/* West */\n.west {\n  position: absolute;\n\tleft: 31%; top: 52%;\n}\n`\n\nconst data = {\n  datasets: [{\n    labels: [\"Red\", \"Blue\"],\n    data: [0, 360],\n    backgroundColor: [\n      \"rgb(255, 99, 132)\",\n      \"rgb(54, 162, 235)\",\n      \"rgb(255, 205, 86)\"\n    ]\n  }]\n}\n\nconst options = {\n\n  circumference: Math.PI * 2,\n  rotation: Math.PI,\n  cutoutPercentage: 80,\n  plugins: {\n    datalabels: {\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      borderColor: '#ffffff',\n      align: 'start',\n      anchor: 'start',\n      offset: 10,\n      borderRadius: 4,\n      borderWidth: 1,\n      formatter: function (value, context) {\n        var i = context.dataIndex;\n        var len = context.dataset.data.length - 1;\n        if (i === len) {\n          return null;\n        }\n        return value + ' mph';\n      }\n    }\n  },\n  legend: {\n    display: false\n  },\n  tooltips: {\n    enabled: false\n  }\n}\n\n\nexport const WindChart = ({ lowElevationName, highElevationName, windUpper, windLower }) => {\n\n  const lowerStationName = lowElevationName && lowElevationName;\n  const lowerWindDirection = windLower && windLower.lowerStationWindDirection;\n  const lowerWindSpeed = windLower && windLower.lowerStationWindSpeed;\n\n  const upperStationName = highElevationName && highElevationName;\n  const upperWindDirection = windUpper && windUpper.upperStationWindDirection;\n  const upperWindSpeed = windUpper && windUpper.upperStationWindSpeed;\n\n  const windDirection = windUpper ? upperWindDirection : lowerWindDirection;\n  const windSpeed = windUpper ? upperWindSpeed : lowerWindSpeed;\n  const stationName = highElevationName ? upperStationName : lowerStationName;\n\n  const [rotation, setRotation] = useState({\n    degree: 0\n  });\n\n  const windDirectionLastTwoDays = (arr1, arr2) => {\n    for (let i = 0; i < arr1.length; i++) {\n      setTimeout(function timer() {\n        setRotation({\n          degree: arr1[i],\n        })\n        data.datasets[0].data = [arr2[i] * 5, 360]\n      }, i * 100);\n   \n    }\n  }\n\n  return (\n    <Wind>\n      <h3 className=\"title\">{stationName ? stationName : 'Station'}</h3>\n      <div className='windSpeed'>\n        <h3>{data.datasets[0].data[0] / 5} km/h</h3>\n      </div>\n      <Doughnut data={data} options={options} />\n      <FontAwesomeIcon className='locationArrow' transform={{ rotate: rotation.degree }} size='2x' color='red' icon={faLocationArrow} />\n      <span className='north'>N</span>\n      <span className='east'>E</span>\n      <span className='south'>S</span>\n      <span className='west'>W</span>\n\n      <div>\n        <button onClick={() => windDirectionLastTwoDays(windDirection, windSpeed)}>48hr Playback</button>\n      </div>\n\n    </Wind >\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}